<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Basic Sorting - The .NET Core ORM Cookbook</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> The .NET Core ORM Cookbook</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="ORMs.htm">ORMs</a></span>
</li>
<li class="tocentry"><a href="FAQ.htm">FAQ</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="StandardCRUDscenarios.htm">Standard CRUD scenarios</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="Fetchingdatascenarios.htm">Fetching data scenarios</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="Advancedscenarios.htm">Advanced scenarios</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="Sortingscenarios.htm">Sorting scenarios</a></span></li>
<li class="tocentry current"><a class="current" href="Sorting.htm">Basic Sorting</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#scenario-prototype">Scenario Prototype</a></li>

<li class="tocentry"><a href="#ado.net">ADO.NET</a></li>

<li class="tocentry"><a href="#chain">Chain</a></li>

<li class="tocentry"><a href="#dapper">Dapper</a></li>

<li class="tocentry"><a href="#dbconnector">DbConnector</a></li>

<li class="tocentry"><a href="#entity-framework-6">Entity Framework 6</a></li>

<li class="tocentry"><a href="#entity-framework-core">Entity Framework Core</a></li>

<li class="tocentry"><a href="#linq-to-db">LINQ to DB</a></li>

<li class="tocentry"><a href="#llblgen-pro">LLBLGen Pro</a></li>

<li class="tocentry"><a href="#nhibernate">NHibernate</a></li>

<li class="tocentry"><a href="#repodb">RepoDb</a></li>

<li class="tocentry"><a href="#servicestack">ServiceStack</a></li>

<li class="tocentry"><a href="#xpo">XPO</a></li>



</ul>
<li class="tocentry"><a href="DynamicSorting.htm">Sorting by Dynamically Chosen Columns</a>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="Storedprocedurescenarios.htm">Stored procedure scenarios</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="Auditingandhistoryscenarios.htm">Auditing and history scenarios</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="Multi-Tenancyscenarios.htm">Multi-Tenancy scenarios</a></span>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">The .NET Core ORM Cookbook</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="Sortingscenarios.htm">Sorting scenarios</a></li> / <li><a href="Sorting.htm">Basic Sorting</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="basic-sorting">Basic Sorting<a class="headerlink" href="#basic-sorting" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>These scenarios demonstrate how to perform basic sorts. </p>
<p>Note: <a href="DynamicSorting">Sorting by dynamically chosen columns</a> or by expressions will be handled in a separate scenarios.</p>
<h2 id="scenario-prototype">Scenario Prototype<a class="headerlink" href="#scenario-prototype" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public interface ISortingScenario&lt;TEmployeeSimple&gt;
   where TEmployeeSimple : class, IEmployeeSimple, new()
{
    /// &lt;summary&gt;
    /// Insert a collection of Employee rows.
    /// &lt;/summary&gt;
    void InsertBatch(IList&lt;TEmployeeSimple&gt; employees);

    /// &lt;summary&gt;
    /// Sorts by the first name
    /// &lt;/summary&gt;
    IList&lt;TEmployeeSimple&gt; SortByFirstName(string lastName);

    /// &lt;summary&gt;
    /// Sorts by the middle name in reverse order, then the first name.
    /// &lt;/summary&gt;
    IList&lt;TEmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName);

    /// &lt;summary&gt;
    /// Sorts by the middle name, then the first name.
    /// &lt;/summary&gt;
    IList&lt;TEmployeeSimple&gt; SortByMiddleNameFirstName(string lastName);
}
</code></pre>

<h2 id="ado.net">ADO.NET<a class="headerlink" href="#ado.net" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
{
    const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, &quot; +
        &quot;e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName ORDER BY e.FirstName&quot;;

    using (var con = OpenConnection())
    using (var cmd = new SqlCommand(sql, con))
    {
        cmd.Parameters.AddWithValue(&quot;@LastName&quot;, lastName);

        var results = new List&lt;EmployeeSimple&gt;();

        using (var reader = cmd.ExecuteReader())
            while (reader.Read())
                results.Add(new EmployeeSimple(reader));

        return results;
    }
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
{
    const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, &quot; +
        &quot;e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName &quot; +
        &quot;ORDER BY e.MiddleName DESC, e.FirstName&quot;;

    using (var con = OpenConnection())
    using (var cmd = new SqlCommand(sql, con))
    {
        cmd.Parameters.AddWithValue(&quot;@LastName&quot;, lastName);

        var results = new List&lt;EmployeeSimple&gt;();

        using (var reader = cmd.ExecuteReader())
            while (reader.Read())
                results.Add(new EmployeeSimple(reader));

        return results;
    }
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
{
    const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, &quot; +
        &quot;e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName &quot; +
        &quot;ORDER BY e.MiddleName, e.FirstName&quot;;

    using (var con = OpenConnection())
    using (var cmd = new SqlCommand(sql, con))
    {
        cmd.Parameters.AddWithValue(&quot;@LastName&quot;, lastName);

        var results = new List&lt;EmployeeSimple&gt;();

        using (var reader = cmd.ExecuteReader())
            while (reader.Read())
                results.Add(new EmployeeSimple(reader));

        return results;
    }
}
</code></pre>

<h2 id="chain">Chain<a class="headerlink" href="#chain" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Columns to be sorted by are passed in as strings, but checked against the list of columns at runtime to prevent SQL injection attacks. A <code>SortExpression</code> object is needed for reverse sorting.</p>
<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
{
    return m_DataSource.From&lt;EmployeeSimple&gt;(new { lastName })
        .WithSorting(&quot;FirstName&quot;).ToCollection().Execute();
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
{
    return m_DataSource.From&lt;EmployeeSimple&gt;(new { lastName })
        .WithSorting(new SortExpression(&quot;MiddleName&quot;, SortDirection.Descending), &quot;FirstName&quot;)
        .ToCollection&lt;EmployeeSimple&gt;().Execute();
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
{
    return m_DataSource.From&lt;EmployeeSimple&gt;(new { lastName })
        .WithSorting(&quot;MiddleName&quot;, &quot;FirstName&quot;).ToCollection&lt;EmployeeSimple&gt;().Execute();
}
</code></pre>

<h2 id="dapper">Dapper<a class="headerlink" href="#dapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
{
    const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, &quot; +
        &quot;e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName &quot; +
        &quot;ORDER BY e.FirstName&quot;;

    using (var con = OpenConnection())
        return con.Query&lt;EmployeeSimple&gt;(sql, new { lastName }).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
{
    const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, &quot; +
        &quot;e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName &quot; +
        &quot;ORDER BY e.MiddleName DESC, e.FirstName&quot;;

    using (var con = OpenConnection())
        return con.Query&lt;EmployeeSimple&gt;(sql, new { lastName }).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
{
    const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, &quot; +
        &quot;e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName &quot; +
        &quot;ORDER BY e.MiddleName, e.FirstName&quot;;

    using (var con = OpenConnection())
        return con.Query&lt;EmployeeSimple&gt;(sql, new { lastName }).ToList();
}
</code></pre>

<h2 id="dbconnector">DbConnector<a class="headerlink" href="#dbconnector" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
{
    const string sql = @&quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone,
        e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @lastName
        ORDER BY e.FirstName;&quot;;


    return DbConnector.ReadToList&lt;EmployeeSimple&gt;(sql, new { lastName }).Execute();
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
{
    const string sql = @&quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone,
        e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @lastName
        ORDER BY e.MiddleName DESC, e.FirstName;&quot;;

    return DbConnector.ReadToList&lt;EmployeeSimple&gt;(sql, new { lastName }).Execute();
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
{
    const string sql = @&quot;
        SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone,
        e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @lastName
        ORDER BY e.MiddleName, e.FirstName;&quot;;

    return DbConnector.ReadToList&lt;EmployeeSimple&gt;(sql, new { lastName }).Execute();
}
</code></pre>

<h2 id="entity-framework-6">Entity Framework 6<a class="headerlink" href="#entity-framework-6" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;Employee&gt; SortByFirstName(string lastName)
{
    using (var context = CreateDbContext())
        return context.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)
{
    using (var context = CreateDbContext())
        return context.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)
{
    using (var context = CreateDbContext())
        return context.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<h2 id="entity-framework-core">Entity Framework Core<a class="headerlink" href="#entity-framework-core" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;Employee&gt; SortByFirstName(string lastName)
{
    using (var context = CreateDbContext())
        return context.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)
{
    using (var context = CreateDbContext())
        return context.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)
{
    using (var context = CreateDbContext())
        return context.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<h2 id="linq-to-db">LINQ to DB<a class="headerlink" href="#linq-to-db" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;Employee&gt; SortByFirstName(string lastName)
{
    using (var db = new OrmCookbook())
        return db.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)
{
    using (var db = new OrmCookbook())
        return db.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)
{
    using (var db = new OrmCookbook())
        return db.Employee.Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<h2 id="llblgen-pro">LLBLGen Pro<a class="headerlink" href="#llblgen-pro" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;EmployeeEntity&gt; SortByFirstName(string lastName)
{
    using(var adapter = new DataAccessAdapter())
    {
        return new LinqMetaData(adapter).Employee.Where(x =&gt; x.LastName == lastName)
                                        .OrderBy(x =&gt; x.FirstName)
                                        .ToList();
    }
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeEntity&gt; SortByMiddleNameDescFirstName(string lastName)

{
    using(var adapter = new DataAccessAdapter())
    {
        return new LinqMetaData(adapter).Employee.Where(x =&gt; x.LastName == lastName)
                                        .OrderByDescending(x =&gt; x.MiddleName)
                                        .ThenBy(x =&gt; x.FirstName)
                                        .ToList();
    }
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeEntity&gt; SortByMiddleNameFirstName(string lastName)
{
    using(var adapter = new DataAccessAdapter())
    {
        return new LinqMetaData(adapter).Employee
                                        .Where(x =&gt; x.LastName == lastName)
                                        .OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName)
                                        .ToList();
    }
}
</code></pre>

<h2 id="nhibernate">NHibernate<a class="headerlink" href="#nhibernate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;Employee&gt; SortByFirstName(string lastName)
{
    using (var session = m_SessionFactory.OpenStatelessSession())
    {
        return session.QueryOver&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.FirstName).Asc
            .List();
    }
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)
{
    using (var session = m_SessionFactory.OpenStatelessSession())
    {
        return session.QueryOver&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.MiddleName).Desc.ThenBy(x =&gt; x.FirstName).Asc
            .List();
    }
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)
{
    using (var session = m_SessionFactory.OpenStatelessSession())
    {
        return session.QueryOver&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.MiddleName).Asc.ThenBy(x =&gt; x.FirstName).Asc
            .List();
    }
}
</code></pre>

<h2 id="repodb">RepoDb<a class="headerlink" href="#repodb" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
{
    return Query(x =&gt; x.LastName == lastName)
        .OrderBy(x =&gt; x.FirstName).AsList();
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
{
    return Query(x =&gt; x.LastName == lastName)
        .OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).AsList();
}
</code></pre>

<pre><code class="cs">public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
{
    return Query(x =&gt; x.LastName == lastName)
        .OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).AsList();
}
</code></pre>

<h2 id="servicestack">ServiceStack<a class="headerlink" href="#servicestack" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;Employee&gt; SortByFirstName(string lastName)
{
    using (var db = _dbConnectionFactory.OpenDbConnection())
    {
        return db.Select(db.From&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; new { x.FirstName })).ToList();
    }
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)

{
    using (var db = _dbConnectionFactory.OpenDbConnection())
    {
        return db.Select(db.From&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderByDescending(x =&gt; new { x.MiddleName }).ThenBy(x =&gt; new { x.FirstName })).ToList();
    }
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)

{
    using (var db = _dbConnectionFactory.OpenDbConnection())
    {
        return db.Select(db.From&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; new { x.MiddleName, x.FirstName })).ToList();
    }
}
</code></pre>

<h2 id="xpo">XPO<a class="headerlink" href="#xpo" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public IList&lt;Employee&gt; SortByFirstName(string lastName) {
        return Session.DefaultSession.Query&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName) {
        return Session.DefaultSession.Query&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
}
</code></pre>

<pre><code class="cs">public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName) {
        return Session.DefaultSession.Query&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName)
            .OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
}
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
The ORM Cookbook. <a href='https://github.com/Grauenwolf/DotNet-ORM-Cookbook' target='_blank'>Visit us at GitHub</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
